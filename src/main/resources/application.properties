spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

server.port=8085
spring.application.name=accounts
spring.profiles.active=prod
#We have used optional in the below property because if some time config server is down then that scenario it should not affect the startup of account service
spring.config.import=optional:configserver:http://localhost:8071/

management.endpoints.web.exposure.include=*

eureka.instance.preferIpAddress = true 
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://localhost:8070/eureka/


## Configuring info endpoint
info.app.name=Accounts Microservice
info.app.description=Eazy Bank Accounts Application
info.app.version=1.0.0
management.info.env.enabled = true


endpoints.shutdown.enabled=true
management.endpoint.shutdown.enabled=true

resilience4j.circuitbreaker.configs.default.registerHealthIndicator= true

#here in below we have used the `detailsForCustomerSupportApp` this is the name of the circuit breaker which we introduced in controller
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.minimumNumberOfCalls= 5

#failure rate threshold in the sense the circuit will open if the 50% of the request gets failed
#in our configuration out of 5 requests if it fails 3 requests then the circuit will get open
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.failureRateThreshold= 50

resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.waitDurationInOpenState= 30000
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.permittedNumberOfCallsInHalfOpenState=2


# retry Mechanism
resilience4j.retry.configs.default.registerHealthIndicator= true
resilience4j.retry.instances.retryForCustomerDetails.maxRetryAttempts=3
resilience4j.retry.instances.retryForCustomerDetails.waitDuration=2000

# rateLimiter Mechanism

resilience4j.ratelimiter.configs.default.registerHealthIndicator= true
resilience4j.ratelimiter.instances.sayHello.timeoutDuration=5000
resilience4j.ratelimiter.instances.sayHello.limitRefreshPeriod=5000
resilience4j.ratelimiter.instances.sayHello.limitForPeriod=1
